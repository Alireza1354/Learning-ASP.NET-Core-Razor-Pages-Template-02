@model Server.Pages.Admin.FileManager.IndexModel
@inject Infrastructure.Settings.ApplicationSettings applicationSettings

@if (Model == null || applicationSettings == null || applicationSettings.FileManagerSettings == null)
{
	return;
}

@{
	var selectItemEnabled = false;

	if (applicationSettings.FileManagerSettings.DeleteItemsEnabled)
	{
		selectItemEnabled = true;
	}
}

<div class="row">
	<div class="col table-responsive">
		<table class="table table-bordered table-sm table-striped table-hover align-middle">
			<caption>Files</caption>

			<thead class="table-primary">
				<tr>
					<th scope="col">
						#
					</th>

					@if (selectItemEnabled)
					{
						<th>
						</th>
					}

					<th scope="col">
						Name
					</th>
					<th>
						Type
					</th>
					<th>
						Length
					</th>
					<th>
						Attributes
					</th>
					<th scope="col">
						Creation Time
					</th>
					<th scope="col">
						Last Write Time
					</th>
					<th scope="col">
						Last Access Time
					</th>
				</tr>
			</thead>
			<tbody>
				@{
					long totalLength = 0;

					var files =
					Model?.Files?
					.OrderBy(current => current.Extension)
					.ThenBy(current => current.Name)
					.ToList()
					;
				}

				@if (files != null && files.Count > 0)
				{
					for (var index = 0; index <= files.Count - 1; index++)
					{
						var item = files[index];

						var pathName = $"{Model?.CurrentPath}{item.Name}";

						totalLength += item.Length;

						<tr>
							<th scope="row">
								@(index + 1)
							</th>

							@if (selectItemEnabled)
							{
								<td>
									<input type="checkbox" id="@(item.Name)" value="@(item.Name)" name="items" class="form-check-input" />
								</td>
							}

							<td>
								<a href="@(pathName)" class="text-decoration-none" target="_blank">
									@(item.Name)
								</a>
							</td>
							<td>
								@(item.Extension?.ToLower())
							</td>
							<td>
								@(item.Length.ToString("#,##0"))
							</td>
							<td>
								@(item.Attributes)
							</td>
							<td>
								@(item.CreationTime.ToString(format: Model.DateTimeFormat))
							</td>
							<td>
								@(item.LastWriteTime.ToString(format: Model.DateTimeFormat))
							</td>
							<td>
								@(item.LastAccessTime.ToString(format: Model.DateTimeFormat))
							</td>
						</tr>
					}
				}
			</tbody>

			<tfoot class="table-primary">
				<tr>
					<th scope="col" colspan="10">
						Total Length:
						@(totalLength.ToString("#,##0")) Bytes
						|
						@((((double)totalLength) / ((double)1024)).ToString("#,##0")) KBytes
						|
						@((((double)totalLength) / ((double)(1024 * 1024))).ToString("#,##0")) MBytes
					</th>
				</tr>
			</tfoot>
		</table>
	</div>
</div>
